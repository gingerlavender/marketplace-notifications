package wb

import (
	"fmt"
	"marketplace-notifications/internal/utils/format"
	"strings"
	"time"
)

type Feedback struct {
	Id             string         `json:"id"`
	NumberOfStars  int            `json:"productValuation"`
	Pros           string         `json:"pros"`
	Cons           string         `json:"cons"`
	Text           string         `json:"text"`
	ProductDetails ProductDetails `json:"productDetails"`
	CreatedDate    time.Time      `json:"createdDate"`
}

func (feedback Feedback) FormatMarkdown() string {
	var message strings.Builder

	message.WriteString(fmt.Sprintf("üì¶  *–¢–æ–≤–∞—Ä \\(–∞—Ä—Ç–∏–∫—É–ª: %d\\):* %s\n\n", feedback.ProductDetails.Article, format.EscapeMarkdown(feedback.ProductDetails.Name)))

	message.WriteString(fmt.Sprintf("üìù  *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:* %s\n\n", strings.Repeat("‚≠ê", feedback.NumberOfStars)))

	message.WriteString(fmt.Sprintf("üëç  *–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞:* %s\n", format.EscapeMarkdown(feedback.Pros)))
	message.WriteString(fmt.Sprintf("üëé  *–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:* %s\n", format.EscapeMarkdown(feedback.Cons)))
	message.WriteString(fmt.Sprintf("üí¨  *–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:* %s\n\n", format.EscapeMarkdown(feedback.Text)))

	message.WriteString(fmt.Sprintf("üÜî  *ID –æ—Ç–∑—ã–≤–∞:* %s\n", format.EscapeMarkdown(feedback.Id)))
	message.WriteString(fmt.Sprintf("‚åö  *–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* %s\n", format.EscapeMarkdown(feedback.CreatedDate.Format(time.DateTime))))

	return message.String()
}
